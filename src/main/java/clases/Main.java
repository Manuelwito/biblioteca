/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package clases;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.InputMismatchException;
import java.util.List;
import java.util.Scanner;

public class Main {

	public static void main(String[] args) {

		ArrayList<Libro> catalogo = new ArrayList<Libro>();

		while (true) {
			int opcion = menu();
			switch (opcion) {
			case 1:
				// TODO Alta de Libro
				// titulo:isbn:genero:autor:paginas
				alta(catalogo);
				break;
			case 2:
				listaLibros(catalogo);
				break;
			case 3:
				bajaLibros(catalogo);
				break;
			case 4:
				buscador(catalogo);
				break;
			case 5:
				ordenacionLibros(catalogo);
				break;
			case 6:
				salvarFichero(catalogo);
				break;
			case 7:
				cargarFichero(catalogo);
				break;
			default:
				break;
			}
		}
	}

	private static int menu() {
		int opcion = 0;

		do {
			System.out.println("Opciones:");
			System.out.println("1. Alta de Libro");
			System.out.println("2. Lista de Libros");
			System.out.println("3. Baja de Libros");
			System.out.println("4. Búsqueda de Libros");
			System.out.println("5. Ordenacion de Libros");
			System.out.println("6. Salvar a Fichero");
			System.out.println("7. Cargar Fichero");

			System.out.println("Introduce la opcion:");

			opcion = leerOpcion(7);

		} while (opcion <= 0);

		return opcion;
	}

	private static int leerOpcion(int max) {
		int opcion = -1;
		try {
			Scanner teclado = new Scanner(System.in);
			opcion = teclado.nextInt();
			if (opcion > max)
				opcion = -1;
		} catch (InputMismatchException e) {
			System.out.println("Opción incorrecta");
		}

		return opcion;
	}

	private static void alta(ArrayList<Libro> catalogo) {
		// Leer de la entrada
		String datosLibro = obtenerDatosLibro();
		// titulo:isbn:genero:autor:paginas
		// Procesar la entrada
		Libro libro = procesaEntrada(datosLibro);
		// Crear el libro con los datos de la entrada
		catalogo.add(libro);
		// Meter el libro en el catalogo
	}

	private static String obtenerDatosLibro() {
		String datos = null;

		boolean validado = false;
		while (!validado) {
			System.out.println("Introduce los datos de un libro.");
			System.out.println("Usa el formato \"titulo:isbn:genero:autor:paginas\"");
			try {
				datos = leerCadena();
				if (true)// Supongo de momento que valida siempre
					validado = true;
			} catch (InputMismatchException e) {
				System.out.println("Datos de entrada no válidos");
			}
		}

		return datos;
	}

	private static Libro procesaEntrada(String entrada) {
		Libro libro = new Libro();

		String[] datos = entrada.split(":");

		String titulo = datos[0];
		String isbn = datos[1];
		Genero genero = Genero.getGenero(datos[2]);
		String autor = datos[3];
		Integer paginas = Integer.parseInt(datos[4]);

		libro.setTitulo(titulo);
		libro.setIsbn(isbn);
		libro.setGenero(genero);
		libro.setAutor(autor);
		libro.setPaginas(paginas);

		return libro;
	}

	private static String leerCadena() {
		String opcion = null;
		Scanner teclado = new Scanner(System.in);
		opcion = teclado.nextLine();
		return opcion;
	}

	private static void listaLibros(ArrayList<Libro> catalogo) {

		int j = 1;

		for (Libro i : catalogo) {

			System.out.println("Nº" + j + ": " + (i));
			j++;
		}

	}

	
	/**
	 * Una vez obtenida la posición en la que se encuentra el libro a eliminar
	 * solicita confirmación y da de baja el libro
	 * @param catalogo
	 */
	private static void bajaLibros(ArrayList<Libro> catalogo) {

		Scanner teclado = new Scanner(System.in);
		int posLibro = 0;
		char respuesta;

	
		System.out.println("Indique el número de la lista del libro que desea eliminar: ");
		posLibro = teclado.nextInt() - 1;

		if (posLibro >= 0) {
			/*
			 * ELIMINACIÓN DEL LIBRO
			 */
			System.out.println("El libro que desea eliminar es: " + catalogo.get(posLibro).toString());
			System.out.println("¿Está seguro S/N?");
			respuesta = teclado.next().charAt(0);
			if (respuesta == 's' || respuesta == 'S') {
				catalogo.remove(posLibro);
			} else
				;

		} else {
			System.out.println("El libro indicado no se encuentra en el catálogo.");
		}
	}

	private static void buscador(ArrayList<Libro> catalogo) {
		Scanner teclado = new Scanner(System.in);
		String isbn;
		int posLibro = 0;
		char respuesta;

		/*
		 * ENTRADA POR TECLADO DE DATOS DEL LIBRO QUE VAMOS A BUSCAR
		 */
		System.out.println("Indique el ISBN del libro que desea buscar: ");
		isbn = teclado.next();

		Libro a = new Libro();
		a.setIsbn(isbn);
		posLibro = catalogo.indexOf(a);
		if (posLibro >= 0) {
			/*
			 * LIBRO ENCONTRADO MUESTRA LIBRO
			 */
			System.out.println("El libro buscado es: " + catalogo.get(posLibro).toString());
		} else {
			System.out.println("El libro indicado no se encuentra en el catálogo.");
		}
	}

	/**
	 * 
	 * @param catalogo
	 */
	private static void ordenacionLibros(ArrayList<Libro> catalogo) {
		Scanner teclado = new Scanner(System.in);
		char respuesta;

		System.out.println("Indique si desea Ordenar los Libros por Título(T) o por nº de Páginas(P) ");

		try {
			respuesta = teclado.next().charAt(0);
			if (respuesta == 'T' || respuesta == 't') {

				Collections.sort(catalogo);
				System.out.println("Catálogo ordenado por Título.");

			}
			if (respuesta == 'P' || respuesta == 'p') {

				Collections.sort(catalogo, new Libro());
				System.out.println("Catálogo ordenado por número de páginas.");
			}
		}

		catch (InputMismatchException e) {
			System.out.println("Opción incorrecta");
		}

	}

	/**
	 * Crea un archivo para guardar el catalogo. Llama a otro metodo para escribir
	 * en el archivo
	 * 
	 * @param catalogo
	 */
	public static void salvarFichero(ArrayList<Libro> catalogo) {

		Scanner teclado = new Scanner(System.in);
		String nombre_archivo;

		System.out.println("Indique el nombre del fichero en el que va a guardar su biblioteca: ");
		nombre_archivo = teclado.next();

		try {
			File biblioteca = new File(nombre_archivo);
			if (biblioteca.createNewFile()) {
				System.out.println("Archivo creado: " + biblioteca.getName());
				System.out.println(biblioteca.getAbsoluteFile());
				escribirArchivo(catalogo, biblioteca);

			} else {
				System.out.println("El archivo ya existe.");
			}

		} catch (IOException e) {
			System.out.println("Ha ocurrido un error.");
			e.printStackTrace();
		}

	}

	/**
	 * Metodo que recibe los siguientes parametros:
	 * 
	 * @param catalogo
	 * @param biblioteca (El archivo en el que va a escribir el catalogo)
	 * 
	 *                   Y que escribe en archivo el catalogo de libros, linea por
	 *                   linea en el formato especificado
	 */
	public static void escribirArchivo(ArrayList<Libro> catalogo, File biblioteca) {

		String ruta_archivo = biblioteca.getAbsolutePath();

		try {
			FileWriter escritura = new FileWriter(ruta_archivo);
			for (int i = 0; i < catalogo.size(); i++) {

				escritura.write(catalogo.get(i).toFichero());

			}

			escritura.close();

		} catch (Exception e) {

		}
	}

	/*
	 * METODO QUE SOLICITA AL USUARIO EL NOMBRE DEL FICHERO. Y LO CARGA EN EL
	 * CATÁLOGO.
	 */
	public static void cargarFichero(ArrayList<Libro> catalogo) {

		Scanner teclado = new Scanner(System.in);
		String archivo_leer;
		System.out.println("Indique el nombre del fichero que desea leer: ");
		archivo_leer = teclado.next();
		String data;

		try {
			File biblioteca = new File(archivo_leer);
			Scanner lector = new Scanner(biblioteca);
			while (lector.hasNextLine()) {
				data = lector.nextLine();

				while (lector.hasNextLine()) {

					data = lector.nextLine();

					String[] datos = data.split(",");

					String titulo = datos[0];
					String isbn = datos[1];
					Genero genero = Genero.getGenero(datos[2]);
					String autor = datos[3];
					Integer paginas = Integer.parseInt(datos[4]);

					Libro libro = new Libro(titulo, isbn, genero, autor, paginas);

					catalogo.add(libro);

				}
			}
			lector.close();

			/*
			 * Confirmación de que se ha realizado la carga correctamente:
			 */
			System.out.println("Fichero cargado con éxito.");
			listaLibros(catalogo);

		} catch (FileNotFoundException e) {
			System.out.println("Ha ocurrido un error. Fichero no coincide");
			e.printStackTrace();
		}

	}

}
